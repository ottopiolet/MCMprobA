
import numpy as np
from mesa import Agent, Model
from mesa.time import RandomActivation
from mesa.space import MultiGrid # A grid that allows multiple agents to share a cell

import matplotlib.pyplot as plt

class Fish(Agent):
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.size = self.random.gauss(AVG_PACK_SIZE, AVG_PACK_SIZE / 10)   #gaussian probability of avg pack size       
        self.dead = False
        
    def migrate(self):
        possible_steps= self.model.grid.get_neighborhood(
            self.pos,
            moore=True,
            include_center=True)
      
        
        new_position = self.random.choice(possible_steps) #change to lower temperature
        self.model.grid.move_agent(self, new_position       
            
    
    def step(self):
        if self.dead:
            return

        #grow depending on growth rate
        x, y = self.pos
        if (x > TERRITORIAL_WATERS_RANGE):
            fishing_rate = FISHING_RATE
            if (self.model.N >= N_FISH + 200):
                fishing_rate += 5
            if (self.model.N <= N_FISH - 200):
                fishing_rate -= 5            
            birth_rate = BIRTH_RATE*(1-BIRTH_PROB_WRT_TEMP * abs(self.model.temperature[x][y]-8))
            death_rate = DEATH_RATE*(1+DEATH_PROB_WRT_TEMP *abs(self.model.temperature[x][y]-8))+fishing_rate
        else:
            fishing_rate = 0
            death_rate = DEATH_RATE*(1+DEATH_PROB_WRT_TEMP *abs(self.model.temperature[x][y]-8))+fishing_rate
            birth_rate = death_rate
            
        self.size += birth_rate - death_rate
    
        

        if (abs(self.model.temperature[x][y]-8) > LIVABLE_TEMPERATURE_RANGE or x < HABITABLE_BABY_RANGE):
            if (self.random.randrange(0,6,1) >= 1):
                self.migrate()
        if (self.random.randrange(0,6,1) == 1):
                self.migrate()
        
        
        #this creates a new pack if the size gets too big, but will kill that new pack if the number of packs is too large
        if self.size > CREATE_NEW_PACK:
             model.N += model.N + 1
             d = Fish(model.N,model)
             model.grid.place_agent(d, (x,y))
             model.schedule.add(d)
             self.size = self.size - d.size
             if (model.N > MAX_N_FISH):
                 d.dead = True
                 
        
        #die if too low
        if self.size <= MIN_PACK_SIZE:
            self.dead = True
            
        
class FishEcoModel(Model):
    def __init__(self, N, width, height):
        self.N = N
        self.grid = MultiGrid(width, height, False)
        self.schedule = RandomActivation(self)
        
        self.temperature = [ [ AVG_TEMP + 1 - TEMP_INC_WITH_HEIGHT*k
                for k in range(height)] for _ in range(width)]
        
        self.temperatureOG = [ [ AVG_TEMP + 1 - TEMP_INC_WITH_HEIGHT*j
                for j in range(height)] for _ in range(width)]
        
        for i in range(self.N):
            d = Fish(i, self)
            self.schedule.add(d)
            
            x = self.random.randrange(self.grid.width)
            y = self.random.randrange(self.grid.height)
            
            self.grid.place_agent(d, (x, y))
            
    def step(self):
        self.schedule.step()
        for x in range(self.grid.width):
            for y in range(self.grid.height):
                self.temperature[x][y] = self.temperatureOG[x][y] + TEMP_GROWTH
        
             
AVG_TEMP = 7    #in celsius           
DEATH_RATE = 3  #fish dead/day
DEATH_PROB_WRT_TEMP = .015 / 600
FISHING_RATE = 15
BIRTH_RATE = DEATH_RATE + FISHING_RATE 
BIRTH_PROB_WRT_TEMP = .016 / 600  
AVG_PACK_SIZE = 60
MIN_PACK_SIZE = 0
TERRITORIAL_WATERS_RANGE = 24
LIVABLE_TEMPERATURE_RANGE = 1
HABITABLE_BABY_RANGE = 27

CREATE_NEW_PACK = 100

TEMP_STANDARD_DEVIATION = .4
TEMP_INC_WITH_HEIGHT = .02
TEMP_INC_WITH_WIDTH = .0001           
DANGEROUSLY_SMALL = 35



TEMP_GROWTH = 0
TEMP_CONSTANT = .288*1360*1401*3600/(3850*1025*8376)

N_FISH = 20
MAX_N_FISH = 2 * N_FISH
KM_FISH_SWIM_IN_ONE_DAY = 40

WIDTH = 48
HEIGHT = 112
NUM_OF_YEARS = 50
TOTAL_TIME = 365 * NUM_OF_YEARS


model = FishEcoModel(N_FISH, WIDTH, HEIGHT)

avg_fish_sizes = 100
alive_fishes = []

data=[]
i=0;

while i<WIDTH:
    data.append(np.arange(HEIGHT))
    i=i+1
for h in range(HEIGHT):
    for w in range(WIDTH):
        data[w][h] = 0

for i in range(TOTAL_TIME):
    TEMP_GROWTH = TEMP_CONSTANT*((i/365)-1+(1/np.exp(i/365)))
    if i % (365) == 0:
        print("Year " + str(i/365))
        
        print("Temperature Distribution")
        plt.imshow(model.temperature, interpolation="nearest")
        plt.colorbar()
        plt.show()
        
        print("Fish Distributions")
        
        
        data=np.array(data)
        numOfAliveFish = 0
        sumOfX = 0
        sumOfY = 0
        for d in model.schedule.agents:
            if not d.dead:
                x, y = d.pos
                data[x][y] = data[x][y] + d.size
                sumOfX += x
                sumOfY += y
                numOfAliveFish += 1
                if (i==0):
                    initialAvgPositionX = sumOfX/numOfAliveFish
                    initialAvgPositionY = sumOfY/numOfAliveFish
               
        plt.imshow(data,interpolation="nearest")
        plt.colorbar()
        plt.show()
        print("Average Position= (" + str(sumOfX/numOfAliveFish) + ", " + str(sumOfY/numOfAliveFish) + ")")
        for h in range(HEIGHT):
            for w in range(WIDTH):
                data[w][h] = 0
        
    model.step()
print("Orignial Average Position= (" + str(initialAvgPositionX) + ", " + str(initialAvgPositionY) + ")")  
